#! /bin/bash

#bash RUN_support

### refresh the item_info_snapshot
#if ! hadoop fs -test -d ${ItemInfoSnapshot}; then hadoop fs -mkdir -p ${ItemInfoSnapshot}; hive -e "select distinct mds_fam_id, dept_nbr, subclass_nbr from ${ItemInfoTbl} where current_ind='Y' and country_code='US' and base_div_nbr = 18;" | sed 's/\t/\x1/g' > item_cat_subcat_mapping_ds_${ITEM_INFO_SNAPSHOT_DATE}; hadoop fs -put item_cat_subcat_mapping_ds_${ITEM_INFO_SNAPSHOT_DATE} ${ItemInfoSnapshot}; fi
if ! hadoop fs -test -d ${ItemInfoSnapshot}; then hadoop fs -mkdir -p ${ItemInfoSnapshot}; hive -e "select distinct system_item_nbr, category_nbr, sub_category_nbr from ${ItemInfoTbl} where ds='${ITEM_INFO_SNAPSHOT_DATE}';" | sed 's/\t/\x1/g' > ${TMP_SUPPORT_DIR}/item_cat_subcat_mapping_ds_${ITEM_INFO_SNAPSHOT_DATE}; hadoop fs -put ${TMP_SUPPORT_DIR}/item_cat_subcat_mapping_ds_${ITEM_INFO_SNAPSHOT_DATE} ${ItemInfoSnapshot}; else echo "The item info snapshot had already been generated!"; fi


###### generate cobought and seasonality data, currently the input table was not refreshed in the prod6 table, pls use the existing table first and skip the following dumping step temporarily.

### cobought update

if ! hadoop fs -test -e ${Cobought}; then 
    if [[ "${MEMBER_TYPE}" == "overall" ]]; then 
        hive -e "SELECT cat_subcat, partition_cat_subcat, score FROM ${CoboughtTbl} WHERE region_nbr='all' AND membership_type_code='all' AND partition_level='overall' AND weights='1&${WT}' AND ${COB_PARTITION}='${COB_DT}';" | sort -k1,1 | awk '$1!=$2' | tr '\t' \| > ${TMP_SUPPORT_DIR}/cobought_${COB_DT}_${WT}
    else
        hive -e "SELECT cat_subcat, partition_cat_subcat, score FROM ${CoboughtTbl} WHERE region_nbr='all' AND membership_type_code='${MEMBER_TYPE}' AND partition_level='member' AND weights='1&${WT}' AND ${COB_PARTITION}='${COB_DT}';" | sort -k1,1 | awk '$1!=$2' | tr '\t' \| > ${TMP_SUPPORT_DIR}/cobought_${COB_DT}_${WT}
    fi
    if ! test -s ${TMP_SUPPORT_DIR}/cobought_${COB_DT}_${WT}; then echo "The cobought data is empty"; exit 1; fi 
    cut -d \| -f2 ${TMP_SUPPORT_DIR}/cobought_${COB_DT}_${WT} | sort | uniq > ${TMP_SUPPORT_DIR}/reco_subcat_${COB_DT}_${WT}
    hadoop fs -put ${TMP_SUPPORT_DIR}/cobought_${COB_DT}_${WT} ${Cobought}
    if [[ $? -ne 0 ]]; then echo "Cobought data uploading failed!"; exit 1; fi
    hadoop fs -put ${TMP_SUPPORT_DIR}/reco_subcat_${COB_DT}_${WT} ${Subcat}
    if [[ $? -ne 0 ]]; then echo "Cobought_reco_subcat data uploading failed!"; exit 2; fi
    echo "The cobought table has been generated!"
else
    echo "The cobought score was already there. No action needed."
fi

TargetNumSubcats=`hadoop fs -cat $Subcat | wc -l`
echo "Number of RECO subcat:" $TargetNumSubcats

### seasonality update

startMonthSeasonality=${yearSeasonality}-01-01
endMonthSeasonality=${yearSeasonality}-12-01
if ! hadoop fs -test -e ${Seasonality}; then 
    hive -e "SELECT CONCAT(IF(category_nbr > 9, CAST(category_nbr AS string), CONCAT('0', CAST(category_nbr AS string))), IF(sub_category_nbr > 9, CAST(sub_category_nbr AS string), CONCAT('0', CAST(sub_category_nbr AS string)))) AS cat_subcat_nbr, seasonality_vst, ${SEASONALITY_PARTITION} FROM ${SeasonalityTbl} WHERE ${SEASONALITY_PARTITION}>='${startMonthSeasonality}' and ${SEASONALITY_PARTITION}<='${endMonthSeasonality}';" > ${TMP_SUPPORT_DIR}/seasonality.raw
    cut -f1 ${TMP_SUPPORT_DIR}/seasonality.raw | sort | uniq > ${TMP_SUPPORT_DIR}/seasonality.catsub
    cat ${TMP_SUPPORT_DIR}/seasonality.raw | python seasonality_format.py ${TMP_SUPPORT_DIR}/seasonality.catsub > ${TMP_SUPPORT_DIR}/seasonality.12mon
    hadoop fs -put ${TMP_SUPPORT_DIR}/seasonality.12mon ${Seasonality}
    if [[ $? -ne 0 ]]; then echo "Seasonality data uploading failed!"; exit 3; fi
    echo "The seasonality table has been generated!"
else
    echo "The seasonality table was already there. No action needed."
fi

### weekly data
if ! hadoop fs -test -e ${Weekly}; then 
    hive -e "SELECT * FROM ${WeeklyTbl};" | cut -f 1-3 > ${TMP_SUPPORT_DIR}/weeklyIndex
    hadoop fs -put ${TMP_SUPPORT_DIR}/weeklyIndex ${Weekly}
    if [[ $? -ne 0 ]]; then echo "Weekly data uploading failed!"; exit 4; fi
    echo "The weekly table has been generated!"
else
    echo "The weekly table was already there. No action needed."
fi

