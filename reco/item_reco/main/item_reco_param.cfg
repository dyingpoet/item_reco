export Pig=/usr/bin/pig

### DT: date the script is triggered
export DT=2014-11-24
#export DT=`date +%Y-%m-%d`

### campaign TYPE can be arbitrarily specified, like "plus", "FirstYear", "ThankYou", etc.
export TYPE=ItemLevel
export TARGET_MONTH=2014-12
export MEMBER_TYPE=all
export PLUS_LEVEL=all

### training / exclusion period
export DataStartT=`date -d "1 year ago ${DS_RUN}" +%Y-%m-%d`
export DataEndT=${DT}
#export DataStartT=2013-10-15
#export DataEndT=2014-10-14
#export ITEM_INFO_SNAPSHOT_DATE=2014-10-14

### cobought_type can be raw or cosine
export COB_TYPE=cosine


### member's cardholder bag generated by the reward propensity scoring pipeline
#export MemCombined=/user/hive/warehouse/mep_gec_modeling.db/sept_campaign_mem_with_compcards
export MemCombined=/user/pythia/Workspaces/SamsMEP/MNScoring/Dec2014/init/2014-10-15/mem_with_compcards_unscrubbed

export TRANS_TBL=pis_member_item_trans_score_partition

export COBOUGHT_TBL=item_level_cobought_${COB_TYPE}_scores_yearly
export SEASONALITY_TBL=sams_combined_global_seasonality_by_month_item

export TRANS_PARTITION=$DT
#export TRANS_PARTITION=2014-11-24
#export CampaignMonth=$DT
#export COB_DT=2014-07-29
#export SEASONALITY_DT=2013-10-01

#export ITEM_RECO_LANDING_DIR=/user/jli21/pythia/Workspaces/SamsMEP/trans_agg/ThankYou/2014-11-24/Decay/item_reco_landing_v4_test

export CONFIG=../config
export RECO_BLACKLIST=`tr "\n" , < $CONFIG/reco_blacklist | sed 's/,$//'`
export ANCHOR_BLACKLIST=`tr "\n" , < $CONFIG/anchor_blacklist | sed 's/,$//'`

export DATABASE=pythia


### subcat scope (4digit cat_subcat_nbr, for example, 0430)
#export StudySet=/user/hive/warehouse/jli21.db/common/study_subcats
#export StudySet=/user/jli21/pythia/Workspaces/SamsMEP/reco/2014-08-20/study_subcats_holiday_v2

### Item Info Table
#export ItemInfoTbl=Common_transaction_model.item_dim
export ItemInfoTbl=sams_us_clubs.item_info_history


export SRC_DIR=/home/jli21/sams/item_cob_scoring/src
export TMP_DIR=/home/jli21/sams/item_cob_scoring/tmp/${DT}
export LOG_DIR=/home/jli21/sams/item_cob_scoring/log/${DT}


####### If the parameters are set correctly, the following parameters can be fixed.
export SRC_SUPPORT_DIR=${SRC_DIR}/support
export SRC_PREP_DIR=${SRC_DIR}/prep
export SRC_AGG_DIR=${SRC_DIR}/agg
export SRC_CORE_DIR=${SRC_DIR}/core
export SRC_POST_DIR=${SRC_DIR}/post

export TMP_SUPPORT_DIR=${TMP_DIR}/support
export TMP_PREP_DIR=${TMP_DIR}/prep
export TMP_AGG_DIR=${TMP_DIR}/agg
export TMP_CORE_DIR=${TMP_DIR}/core
export TMP_POST_DIR=${TMP_DIR}/post

export LOG_SUPPORT_DIR=${LOG_DIR}/support
export LOG_PREP_DIR=${LOG_DIR}/prep
export LOG_AGG_DIR=${LOG_DIR}/agg
export LOG_CORE_DIR=${LOG_DIR}/core
export LOG_POST_DIR=${LOG_DIR}/post

export TOUCH1=${LOG_DIR}/touch1
export TOUCH2=${LOG_DIR}/touch2
export TOUCH3=${LOG_DIR}/touch3
export TOUCH4=${LOG_DIR}/touch4
export TOUCH5=${LOG_DIR}/touch5
export TOUCH6=${LOG_DIR}/touch6
export TOUCH7=${LOG_DIR}/touch7

### remind scope; these dates will be automatically generated based on the TargetMonth.
#export DateLB=2012-12-01
#export DateUB=2014-05-31
#export SPLB=2012-08-01
#export SPUB=2012-08-31
#export SplitDate=2013-06-01
year=`date +%Y -d $DT`
month=`date +%m -d $DT`
lastMonthYr=`date -d "1 month ago ${DS_RUN}"  +%Y`
lastMonthMon=`date -d "1 month ago ${DS_RUN}"  +%m`
#export SeasonalityEndDate=${lastMonthYr}"-"${lastMonthMon}"-01"
#export SeasonalityStartDate=`date -d "360 days ago ${SeasonalityEndDate}" +%Y-%m-%d`
#echo SeasonalityStartDate=${SeasonalityStartDate}
#echo SeasonalityEndDate=${SeasonalityEndDate}
if [[ $month -gt $TargetMonth ]]; then year=$((year+1-2)); else year=$((year-2)); fi
export DateUB=$DataEndT
export DataStartTts=`date -d $DataStartT +"%s"`
export DateLBts=$((DataStartTts- 24*3600*30));
export DateLB=`date -d@"$DateLBts" +%Y-%m-%d`;
export SplitDate=$DataStartT
export SPLB=${year}-${month}-01
export SPUB=${year}-${month}-31
export yearSeasonality=$((year+1))

### other fixed param
export N_QTL=10
export AGG_METHOD="Decay"
export EligibleStartT=$DataStartT
export EligibleEndT=$DataEndT
### here the WT denote the weight we gave to online transactions when combining store / online transactions
export WT=1

### input tbl last snapshot
InputTblLastUpdate=/user/pythia/final_weekly_update.txt
 
if ! test -d ${TMP_SUPPORT_DIR}; then mkdir -p ${TMP_SUPPORT_DIR}; fi
hadoop fs -cat ${InputTblLastUpdate} > ${TMP_SUPPORT_DIR}/input_tbl_update

while read line
do
  arrName=(${line//,/ })
  #echo $line
  #echo ${arrName[0]}
  #echo ${arrName[1]}
  #echo ${arrName[2]}
  case ${arrName[0]} in
    "item_cobought_tbl")
    export COB_PARTITION=${arrName[1]}
    export COB_DT=${arrName[2]};;
    "item_seasonality_tbl")
    export SEASONALITY_PARTITION=${arrName[1]}
    export SEASONALITY_DT=${arrName[2]};;
  *)
esac
done < ${TMP_SUPPORT_DIR}/input_tbl_update

### the following 4 dates will be automatically generated when the co_bought and seasonality pipelines are in place
#export COB_DT=2014-04-30
#export SEASONALITY_DT=2014-09-09
#export SEASONALITY_START_MONTH=2013-01-01
#export SEASONALITY_END_MONTH=2013-12-01
TARGET_DT=${TARGET_MONTH}-01
echo "TARGET_DT="${TARGET_DT}
seasonYear=`date +%Y -d $TARGET_DT`
seasonYear=$((seasonYear-1))
seasonMonth=`date +%m -d $TARGET_DT`
export SEASONALITY_DT=${seasonYear}-${seasonMonth}-01

echo "COB_DT="${COB_DT}
echo "SEASONALITY_DT="${SEASONALITY_DT}

 
# ### distinct <item,category,sub_category> pulled from the item_info table, 28486^A1^A2 (delimter \x001)
# #export ItemInfoSnapshot=/user/hive/warehouse/jli21.db/common/item_subcat_mapping
# #export ItemInfoSnapshot=/user/hive/warehouse/jli21.db/common/item_cat_subcat_mapping/ds=${ITEM_INFO_SNAPSHOT_DATE}
# export ItemInfoSnapshot=/user/jli21/sams/cf/prep/item_cat_subcat_mapping/ds=${ITEM_INFO_SNAPSHOT_DATE}
# 
# ###updated global table; please use the fixed tables temporarily. These tables will be automatically generated once the co_bought / seasonality pipeline are ready on prod 6.
# export SeasonalityTbl=pythia.sams_combined_global_seasonality_by_month
# export CoboughtTbl=pythia.cobought_attr_${COB_TYPE}_scores_yearly_combined
# export WeeklyTbl=pythia.global_level_week_factor_combined
# 
# ###cobought file: anchor subcat | reco subcat | score
# #export Cobought=/user/jli21/data/co_bought/${COB_DT}/plus/cobought_${COB_DT}_${WT}
# #export Cobought=/user/jli21/data/co_bought/${COB_DT}/${COB_TYPE}/cobought_${COB_DT}_${WT}
# export Cobought=/user/jli21/sams/cf/prep/item_cobought/${COB_DT}/${COB_TYPE}/cobought_${COB_DT}_${WT} 
# echo "Cobought="${Cobought}
# 
# ###subcat coverage in the cobought table
# #export Subcat=/user/jli21/data/subcatReco/${COB_DT}/plus/subcatReco_${COB_DT}_${WT}
# #export Subcat=/user/jli21/data/subcatReco/${COB_TYPE}/subcatReco_${COB_DT}_${WT}
# export Subcat=/user/jli21/sams/cf/prep/subcatReco/${COB_DT}/${COB_TYPE}/subcatReco_${COB_DT}_${WT}  
# 
# ###seasonality file: subcat|jan-value|feb-value|... sum up to 12
# #export Seasonality=/user/jli21/data/seasonality/combined/2013/rewati_seasonality.12mon_2013
# #export Seasonality=/user/jli21/data/seasonality/combined/fixed/${SEASONALITY_DT}
# export Seasonality=/user/jli21/sams/cf/prep/item_seasonality/fixed/2014-09-09
# echo "Seasonality="${Seasonality}
# 
# ###weekly file
# export WEEKLY_DT=`hive -e "SELECT * FROM ${WeeklyTbl};" | cut -f 4 | head -1`
# export Weekly=/user/jli21/data/seasonality/weekly/${WEEKLY_DT} 
# echo "Weekly="${Weekly}
# 
# ###idf file: subcat | idf-value: No longer used and don't need to be updated
# #export Idf=/user/jli21/data/idf/2013-11-07/decay/idf20131107Decay/idf20131107D
# export Idf=/user/jli21/sams/cf/prep/plus/init/20131107Decay/transactionAgg_cobought_studySet_subcatAll_idf/part-m-00000



### fixed path param
#export TransOffline=hdfs://nameservice1/user/rovalek/Workspaces/SamsMEP/customer_club_day_item_sales_with_sub_category
#export TransOnline=hdfs://nameservice1/user/rovalek/Workspaces/SamsMEP/customer_online_day_item_sales_with_sub_category
#export TransOffline=/user/hive/warehouse/mep_gec_modeling.db/customer_club_day_item_sales_with_sub_category
#export TransOnline=/user/hive/warehouse/mep2_gec_modeling.db/customer_online_day_item_sales_with_sub_category_v2
export TransOffline=/user/pythia/Workspaces/SamsMEP/customer_club_day_item_sales_with_sub_category_v2
export TransOnline=/user/pythia/Workspaces/SamsMEP/sams_online_dump
export MemberPref=/user/jli21/pythia/Workspaces/SamsMEP/reco/$DT/member_item_preference_for_offer_assignment
export OutputDir=/user/jli21/pythia/Workspaces/SamsMEP
#export TRANS_LOC=/user/jli21/pythia/Workspaces/SamsMEP/trans_agg/ThankYou/2014-11-24/Decay/transactionAgg_cobought_studySet_subcatAll_10qtl


### derived param below

### scoring output
export TransAgg=$OutputDir/trans_agg/${TYPE}/${DT}/${AGG_METHOD}/transactionAgg_item_cobought_studySet_subcatAll
export TransDataPct=${TransAgg}"_"${N_QTL}"qtl"
export TransDataPctAppend=${TransDataPct}"_append"
export Output=$OutputDir/Recommend/Scoring/${TYPE}/${DT}/${AGG_METHOD}/recommend_score_cobought_no_smoothing_max_${COB_TYPE}_cobought_transaction_debug
export TRANS_LOC=$TransDataPct
export TRANS_PATH=/user/jli21/test
echo $TransDataPct
echo $Output

### score adjustment
export RecoScore=${Output}
export RecoRemind=${RecoScore}"_adj"
export RecoStudy=${RecoRemind}"_study"
export RecoStudyMax=${RecoRemind}"_study_max"
export RecoStudyScaled=${RecoRemind}"_study_scaled"


