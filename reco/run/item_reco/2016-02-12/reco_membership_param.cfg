export Pig=/usr/bin/pig

### DT: date the script is triggered
#export DS_RUN=2015-05-26
export DS_RUN=2016-02-12
#export DS_RUN=`date +%Y-%m-%d`
echo "DS_RUN=${DS_RUN}"
export DT=`date -d "1 day ago ${DS_RUN}" +%Y-%m-%d`

### campaign TYPE can be arbitrarily specified, like "plus", "FirstYear", "ThankYou", etc.
#export TYPE=plus/init
#export TYPE=ThankYou
TYPE="cnp_member"
export MEMBER_TYPE=all
#export MEMBER_TYPE=overall
export PLUS_LEVEL=overall

### training / exclusion period
#export TargetMonth=11
#export DataStartT=2013-11-04
#export DataEndT=2014-11-05
#export ITEM_INFO_SNAPSHOT_DATE=2014-11-05
#export TargetMonth=3
export TargetMonth=`date -d "7 days ${DS_RUN}" +%m`
export DataStartT=`date -d "1 year ago ${DS_RUN}" +%Y-%m-%d`
export DataEndT=${DT}
export ITEM_INFO_SNAPSHOT_DATE=${DT}
export INVENTORY_SNAPSHOT_DATE=${DT}
export OBSOLETE_DATE=`date -d "3 days ago ${DS_RUN}" +%Y-%m-%d`

### cobought_type can be raw or cosine
export COB_TYPE=cosine


### member's cardholder bag generated by the reward propensity scoring pipeline
#export MemCombined=/user/hive/warehouse/mep_gec_modeling.db/sept_campaign_mem_with_compcards
#export MemCombined=/user/pythia/Workspaces/SamsMEP/MNScoring/Dec2014/init/2014-10-15/mem_with_compcards_unscrubbed

### subcat scope (4digit cat_subcat_nbr, for example, 0430)
#export StudySet=/user/hive/warehouse/jli21.db/common/study_subcats
export StudySet=/user/jli21/pythia/Workspaces/SamsMEP/reco/2014-08-20/study_subcats_holiday_v2

### Item Info Table
#export ItemInfoTbl=Common_transaction_model.item_dim
export ItemInfoTbl=sams_us_clubs.item_info_history

### Inventory Table
export InventoryHistTbl=sams_us_clubs.club_item_inventory_history

### Membership, Cardholder dim
export SamsMembershipDimTbl=customers.sams_us_clubs_sams_membership_dim
export SamsCardholderDimTbl=customers.sams_us_clubs_sams_mbr_cardholder_dim

export SRC_DIR=/home/jli21/project/reco/src/production/item_reco/src
export TMP_DIR=/home/jli21/project/item_reco/tmp/${DT}
export LOG_DIR=/home/jli21/project/item_reco/log/${DT}


####### If the parameters are set correctly, the following parameters can be fixed.
export SRC_SUPPORT_DIR=${SRC_DIR}/support
export SRC_PREP_DIR=${SRC_DIR}/prep
export SRC_AGG_DIR=${SRC_DIR}/agg
export SRC_CORE_DIR=${SRC_DIR}/core
export SRC_POST_DIR=${SRC_DIR}/post
export SRC_OUTPUT_DIR=${SRC_DIR}/output

export TMP_SUPPORT_DIR=${TMP_DIR}/support
export TMP_PREP_DIR=${TMP_DIR}/prep
export TMP_AGG_DIR=${TMP_DIR}/agg
export TMP_CORE_DIR=${TMP_DIR}/core
export TMP_POST_DIR=${TMP_DIR}/post

export LOG_SUPPORT_DIR=${LOG_DIR}/support
export LOG_PREP_DIR=${LOG_DIR}/prep
export LOG_AGG_DIR=${LOG_DIR}/agg/${TYPE}
export LOG_CORE_DIR=${LOG_DIR}/core/${TYPE}_${COB_TYPE}
export LOG_POST_DIR=${LOG_DIR}/post/${TYPE}_${COB_TYPE}
export LOG_OUTPUT_DIR=${LOG_DIR}/output/${TYPE}_${COB_TYPE}

export TOUCH1=${LOG_DIR}/${TYPE//\//_}_touch1
export TOUCH2=${LOG_DIR}/${TYPE//\//_}_touch2
export TOUCH3=${LOG_DIR}/${TYPE//\//_}_touch3_${COB_TYPE}
export TOUCH4=${LOG_DIR}/${TYPE//\//_}_touch4_${COB_TYPE}
export TOUCH5=${LOG_DIR}/${TYPE//\//_}_touch5_${COB_TYPE}
export TOUCH6=${LOG_DIR}/${TYPE//\//_}_touch6_${COB_TYPE}
export TOUCH7=${LOG_DIR}/${TYPE//\//_}_touch7_${COB_TYPE}
export TOUCH_MEMBERSHIP_OUTPUT=${LOG_DIR}/touch_membership_output
export TOUCH_CARDHOLDER_OUTPUT=${LOG_DIR}/touch_cardholder_output
export TOUCH_WMX_OUTPUT=${LOG_DIR}/touch_wmx_output
export TOUCH_ISB_CARDHOLDER_OUTPUT=${LOG_DIR}/touch_isb_cardholder_output

### Database that stores temp table
export Database=jli21

### remind scope; these dates will be automatically generated based on the TargetMonth.
#export DateLB=2012-12-01
#export DateUB=2014-05-31
#export SPLB=2012-08-01
#export SPUB=2012-08-31
#export SplitDate=2013-06-01
year=`date +%Y -d $DT`
month=`date +%m -d $DT`
#lastMonthYr=`date -d "1 month ago ${DS_RUN}"  +%Y`
#lastMonthMon=`date -d "1 month ago ${DS_RUN}"  +%m`
#export SeasonalityEndDate=${lastMonthYr}"-"${lastMonthMon}"-01"
#export SeasonalityStartDate=`date -d "360 days ago ${SeasonalityEndDate}" +%Y-%m-%d`
#echo SeasonalityStartDate=${SeasonalityStartDate}
#echo SeasonalityEndDate=${SeasonalityEndDate}
#if [[ $month -gt $TargetMonth ]]; then year=$((year+1-2)); else year=$((year-2)); fi
#export DateUB=$DataEndT
#export DataStartTts=`date -d $DataStartT +"%s"`
##extend 30 day remind; 13 months
#export DateLBts=$((DataStartTts- 24*3600*30));
#export DateLB=`date -d@"$DateLBts" +%Y-%m-%d`;
#export SplitDate=$DataStartT
#export SPLB=${year}-${month}-01
#export SPUB=${year}-${month}-31
#export yearSeasonality=$((year+1))

if [[ $month -gt $TargetMonth ]]; then echo "Target month is in the following year"; else year=$((year-1)); fi


### other fixed param
export N_QTL=10
export AGG_METHOD="Decay"
export EligibleStartT=$DataStartT
export EligibleEndT=$DataEndT
### here the WT denote the weight we gave to online transactions when combining store / online transactions
export WT=1

### input tbl last snapshot
InputTblLastUpdate=/user/pythia/final_weekly_update.txt

#if ! test -d ${TMP_SUPPORT_DIR}; then mkdir -p ${TMP_SUPPORT_DIR}; fi
if ! test -d ${TMP_DIR}; then mkdir -p ${TMP_DIR}; mkdir -p ${TMP_CORE_DIR} ${TMP_SUPPORT_DIR} ${TMP_AGG_DIR} ${TMP_PREP_DIR} ${TMP_POST_DIR}; fi 
 
hadoop fs -cat ${InputTblLastUpdate} > ${TMP_SUPPORT_DIR}/input_tbl_update

while read line
do
  arrName=(${line//,/ })
  #echo $line
  #echo ${arrName[0]}
  #echo ${arrName[1]}
  #echo ${arrName[2]}
  case ${arrName[0]} in
    "item_cobought_tbl")
    export COB_PARTITION=${arrName[1]}
    export COB_DT=${arrName[2]};;
    "item_seasonality_tbl")
    export SEASONALITY_PARTITION=${arrName[1]}
    export SEASONALITY_DT=${arrName[2]};;
  *)
  esac
done < ${TMP_SUPPORT_DIR}/input_tbl_update

### the following 4 dates will be automatically generated when the co_bought and seasonality pipelines are in place
#export COB_DT=2014-04-30
#export SEASONALITY_DT=2014-09-09
#export SEASONALITY_START_MONTH=2013-01-01
#export SEASONALITY_END_MONTH=2013-12-01

echo "COB_DT="${COB_DT}
#echo "SEASONALITY_DT="${SEASONALITY_DT}

export SEASONALITY_DT=${year}"-"${TargetMonth}"-01"
echo "SEASONALITY_DT="${SEASONALITY_DT}

### distinct <item,category,sub_category> pulled from the item_info table, 28486^A1^A2 (delimter \x001)
#export ItemInfoSnapshot=/user/hive/warehouse/jli21.db/common/item_subcat_mapping
#export ItemInfoSnapshot=/user/hive/warehouse/jli21.db/common/item_cat_subcat_mapping/ds=${ITEM_INFO_SNAPSHOT_DATE}
export ItemInfoSnapshot=/user/jli21/sams/cf/prep/item_cat_subcat_mapping/ds=${ITEM_INFO_SNAPSHOT_DATE}

###updated global table; please use the fixed tables temporarily. These tables will be automatically generated once the co_bought / seasonality pipeline are ready on prod 6.
#export SeasonalityTbl=pythia.sams_combined_global_seasonality_by_month
#export SeasonalityTbl=pythia.cat_subcat_specific_seasonality_data_month
export SeasonalityTbl=pythia.item_specific_seasonality_data_month
#export CoboughtTbl=pythia.cobought_attr_${COB_TYPE}_scores_yearly_combined
export CoboughtTbl=pythia.item_level_cobought_cosine_scores_yearly
export WeeklyTbl=pythia.global_level_week_factor_combined

###cobought file: anchor subcat | reco subcat | score
#export Cobought=/user/jli21/data/co_bought/${COB_DT}/plus/cobought_${COB_DT}_${WT}
#export Cobought=/user/jli21/data/co_bought/${COB_DT}/${COB_TYPE}/cobought_${COB_DT}_${WT}
export Cobought=/user/jli21/sams/cf/prep/cobought/${COB_DT}/${COB_TYPE}/cobought_${COB_DT}_${WT} 
echo "Cobought="${Cobought}

###subcat coverage in the cobought table
#export Subcat=/user/jli21/data/subcatReco/${COB_DT}/plus/subcatReco_${COB_DT}_${WT}
#export Subcat=/user/jli21/data/subcatReco/${COB_TYPE}/subcatReco_${COB_DT}_${WT}
export Subcat=/user/jli21/sams/cf/prep/subcatReco/${COB_DT}/${COB_TYPE}/subcatReco_${COB_DT}_${WT}  

###seasonality file: subcat|jan-value|feb-value|... sum up to 12
#export Seasonality=/user/jli21/data/seasonality/combined/2013/rewati_seasonality.12mon_2013
export Seasonality=/user/jli21/data/seasonality/combined/fixed/${SEASONALITY_DT}
#export Seasonality=/user/jli21/sams/cf/prep/seasonality/fixed/2014-09-09
echo "Seasonality="${Seasonality}

###weekly file
export WEEKLY_DT=`hive -e "SELECT * FROM ${WeeklyTbl};" | cut -f 4 | head -1`
export Weekly=/user/jli21/data/seasonality/weekly/${WEEKLY_DT} 
echo "Weekly="${Weekly}

###idf file: subcat | idf-value: No longer used and don't need to be updated
#export Idf=/user/jli21/data/idf/2013-11-07/decay/idf20131107Decay/idf20131107D
export Idf=/user/jli21/sams/cf/prep/plus/init/20131107Decay/transactionAgg_cobought_studySet_subcatAll_idf/part-m-00000



### fixed path param
#export TransOffline=hdfs://nameservice1/user/rovalek/Workspaces/SamsMEP/customer_club_day_item_sales_with_sub_category
#export TransOnline=hdfs://nameservice1/user/rovalek/Workspaces/SamsMEP/customer_online_day_item_sales_with_sub_category
#export TransOffline=/user/hive/warehouse/mep_gec_modeling.db/customer_club_day_item_sales_with_sub_category
#export TransOnline=/user/hive/warehouse/mep2_gec_modeling.db/customer_online_day_item_sales_with_sub_category_v2
export TransOffline=/user/pythia/Workspaces/SamsMEP/customer_club_day_item_sales_with_sub_category_v2
export TransOnline=/user/pythia/Workspaces/SamsMEP/sams_online_dump
export MemberPref=/user/jli21/pythia/Workspaces/SamsMEP/reco/$DT/member_item_preference_for_offer_assignment
export OutputDir=/user/pythia/Workspaces/SamsMEP

### prep module
export TempLandingDir=/user/jli21/pythia/Workspaces/CNP/reco
export ItemInfoDump=${TempLandingDir}/$DT/itemInfo/dump

export ProdIdMap=`hadoop fs -ls /user/pythia/Workspaces/SamsMEP/mapping/systemItemNbr_catalogItemId_map/ | tail -1 | cut -d ' ' -f19`
#export ProdIdMap=/user/pythia/Workspaces/SamsMEP/mapping/systemItemNbr_catalogItemId_map/ds=2014-11-16-0600
#export DailyIndexLoc=${TempLandingDir}/2014-10-07/seasonality/daily/weekly_seasonality/00000
export DailyIndexLoc=${Weekly}

export ClubItemLandingDir=${TempLandingDir}/$DT/landing/clubItemLandingDir/
export PaidCardPreferClubLandingDir=${TempLandingDir}/$DT/landing/paidCardPreferClubLandingDir/
export AllCardPreferClubLandingDir=${TempLandingDir}/$DT/landing/allCardPreferClubLandingDir/

export MemberTriplePaidCard=${TempLandingDir}/$DT/tripleKey/paid
export MemberTripleAllCard=${TempLandingDir}/$DT/tripleKey/all
export MemberTripleActiveCard=${TempLandingDir}/$DT/tripleKey/active

export ItemPrefClub=${TempLandingDir}/$DT/preference/item_club_preference
export ItemPrefMembership=${TempLandingDir}/$DT/preference/item_membership_preference
export ItemPrefCardholder=${TempLandingDir}/$DT/preference/item_cardholder_preference
export ClubSubcat2Item=${TempLandingDir}/$DT/preference/clubSubcat2Item

export DATABASE=pythia
export TRANS_TBL=pythia.pis_member_item_trans_score_partition

### derived param below

### scoring output
export TransAgg=$OutputDir/trans_agg/${TYPE}/${DS_RUN}/${AGG_METHOD}/transactionAgg_cobought_studySet_subcatAll
export TransDataPct=${TransAgg}"_"${N_QTL}"qtl"
export TransDataPctAppend=${TransDataPct}"_append"
export Output=$OutputDir/Recommend/Scoring/${TYPE}/${DS_RUN}/${AGG_METHOD}/recommend_score_cobought_no_smoothing_max_${COB_TYPE}_cobought_transaction_debug

### score adjustment
export RecoScore=${Output}
export RecoTop=${Output}"_top"
export RecoRemind=${RecoScore}"_adj"
export RecoStudy=${RecoRemind}"_study"
export RecoStudyMax=${RecoRemind}"_study_max"
export RecoStudyScaled=${RecoRemind}"_study_scaled"
export RecoCNP=${RecoScore}"_cnp.gz"
export RecoWMX=${RecoScore}"_wmx"

export TRANS_PARTITION=$DS_RUN
export TRANS_LOC=$TransDataPct



export SEASONALITY_TBL=pythia.item_specific_seasonality_data_month
export COBOUGHT_TBL=pythia.item_level_cobought_cosine_scores_yearly
#export RECO_BLACKLIST=${SRC_DIR}/config/blacklist.system
#export ANCHOR_BLACKLIST=${SRC_DIR}/config/blacklist.system
export RECO_BLACKLIST=${SRC_DIR}/config/system.87
export ANCHOR_BLACKLIST=${SRC_DIR}/config/system.87

echo $SEASONALITY_TBL
echo $COBOUGHT_TBL
